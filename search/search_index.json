{"config":{"lang":["fr"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#bienvenu-sur-mon-site-web","title":"Bienvenu sur mon site web","text":"<p>Sur ce site web, vous allez trouver des exemples de projet pour lesquel j'ai participer.</p>"},{"location":"#projet-de-fin-detude","title":"Projet de fin d'\u00e9tude","text":"<p>Ma mission personnel est d'aider les entreprises \u00e0 tir\u00e9 partie des ressources et opportunit\u00e9 qu'offre les technologies du num\u00e9rique. Mon projet de fin d'\u00e9tude est un notebook Jupyter inspir\u00e9 du livre Business Case Analysis with R par Robert D. Brown III. J'ai voulu utiliser la programmation afin de rapidement pouvoir calculer le retour sur investissement de lancer un projet de transformation num\u00e9rique. De plus, les projets de transformation num\u00e9rique sont des projets plus risquer ainsi, il y a aussi des outils pour faire l'analyse du plan de projet. </p>"},{"location":"#redaction-technique-avec-markdown-et-mermaid","title":"R\u00e9daction technique avec Markdown et Mermaid","text":"<p>En tant que future ing\u00e9nieur, je me suis int\u00e9r\u00e9ser \u00e0 la r\u00e9daction technique afin de produire des documents de qualit\u00e9 expliquant de la meilleur mani\u00e8re possible les designs et fonctionnalit\u00e9 que moi ou mon \u00e9quipe d\u00e9velopons. Pour se faire, j'ai appris le language Markdown qui m'a permit de construire des sites comme celui-ci ainsi que des documents qui sont h\u00e9berger le plus proche possible du code qu'il d\u00e9vrive. </p>"},{"location":"#controle-qualite-et-redaction-de-test-automatiser","title":"Contr\u00f4le qualit\u00e9 et r\u00e9daction de test automatiser","text":"<p>Afin de v\u00e9rifier si l'application qui a \u00e9t\u00e9 batis r\u00e9pons au exigence du client, je me suis int\u00e9r\u00e9ser au contr\u00f4le qualit\u00e9 ainsi qu'au test automatique. </p>"},{"location":"#application","title":"Application","text":""},{"location":"Ajouter%20tableau%20de%20bord%20service/","title":"Documentation technique","text":""},{"location":"Ajouter%20tableau%20de%20bord%20service/#solution-proposer","title":"Solution proposer","text":"<p>Pr\u00e9sentement, le profil de base Service n'a pas de Dashboard. Il faudrait pouvoir ajouter des liens dans la section Actions, une banni\u00e8re ainsi que quelque tuile. </p>"},{"location":"Ajouter%20tableau%20de%20bord%20service/#detail-technique","title":"D\u00e9tail Technique","text":"<pre><code>classDiagram\n    ProfileService -- ProfileServiceAction\n    ProfileService -- ProfileServiceBanni\u00e8re\n    ProfileService -- ProfileServiceTuiles\n\n    ProfileServiceAction : Create Contract Service Orders()\n    ProfileServiceAction : Create Service Items()\n    ProfileServiceAction : Create Service Order()\n    ProfileServiceAction : Create Service Contract()\n    ProfileServiceTuiles : Nb Service Order active\n    ProfileServiceTuiles : Nb service task\n    ProfileServiceTuiles : Nb Service order overdue\n    ProfileServiceTuiles : Nb Service order Important\n</code></pre>"},{"location":"Ajouter%20tableau%20de%20bord%20service/#estimation","title":"Estimation","text":"<p>Analyse : </p> <p>D\u00e9veloppement : </p> <p>Test : </p>"},{"location":"Ajouter%20tableau%20de%20bord%20service/#control-qualite","title":"Control Qualit\u00e9","text":"No Steps R\u00e9sultat souhait\u00e9 Passer 1 Cr\u00e9er un service ordre Le num\u00e9ro sur la tuile Nb Service order active devrais monter 2 Fermer un service ordre Le num\u00e9ro sur la tuile Nb Service order active devrais descendre 3 Changer la date d'un service ordre pour une date passer Le num\u00e9ro sur la tuile Nb Service ordre Overdue devrais mont\u00e9 4 Changer la priorit\u00e9 d'un service ordre pour important Le num\u00e9ro sur la tuile Nb Service ordre important devrait mont\u00e9"},{"location":"Projet/","title":"Application d'analyse de projet","text":"In\u00a0[107]: Copied! <pre>import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.stats import norm\nimport statistics\nimport random\nimport seaborn as sns\n</pre> import pandas as pd import numpy as np import matplotlib.pyplot as plt from scipy.stats import norm import statistics import random import seaborn as sns In\u00a0[108]: Copied! <pre>#@title `Param\u00e9trez les variables de d\u00e9part`\n#@markdown Nom de la premi\u00e8re activit\u00e9\nACT1 = 'Clearing the site' #@param {type:\"string\"}\n#@markdown Meilleur temps de la premi\u00e8re activit\u00e9\nBEST1 = 3 #@param {type:\"number\"}\n#@markdown Temps millieux de la premi\u00e8re activit\u00e9\nML1 = 6 #@param {type:\"number\"}\n#@markdown Pire temps de la premi\u00e8re activit\u00e9\nWORST1 = 6 #@param {type:\"number\"}\n#@markdown Activit\u00e9 critique?\nCRIT1 = True #@param {type:\"boolean\"}\n</pre> #@title `Param\u00e9trez les variables de d\u00e9part` #@markdown Nom de la premi\u00e8re activit\u00e9 ACT1 = 'Clearing the site' #@param {type:\"string\"} #@markdown Meilleur temps de la premi\u00e8re activit\u00e9 BEST1 = 3 #@param {type:\"number\"} #@markdown Temps millieux de la premi\u00e8re activit\u00e9 ML1 = 6 #@param {type:\"number\"} #@markdown Pire temps de la premi\u00e8re activit\u00e9 WORST1 = 6 #@param {type:\"number\"} #@markdown Activit\u00e9 critique? CRIT1 = True #@param {type:\"boolean\"}  In\u00a0[109]: Copied! <pre>Projet = pd.DataFrame(columns=[\"Activit\u00e9\",'BEST', 'ML', 'WORST', \"AVG\",\"SD\", \"CRIT\"])\nProjet[\"Activit\u00e9\"] = ACT1, \"Removing trees\", \"Subsurface drainage\", \"Filling playing field/track\",\"Installing artificial playing turf\",\"Excavation\", \"Pouring concrete footings\", \"Pouring supports seat galleries\", \"Erecting pre-cast galleries\", \"Pouring seats\",\"Steel structure\",\"Roof\", \"Dressing rooms\", \"Painting\",\"Lights\",\"Scoreboard\"\nProjet[\"BEST\"] = BEST1,1,4,11,11,2,3,10,9,3,1,3,3,3,1,2\nProjet[\"ML\"] = ML1,2,8,14,12,4,4,10,10,4,2,4,4,3,2,3\nProjet[\"WORST\"] = WORST1,3,12,17,13,6,8,10,11,5,3,5,5,6,3,4\nProjet[\"AVG\"] =( Projet[\"BEST\"] + 4* Projet[\"ML\"] + Projet[\"WORST\"] )/ 6 \nProjet[\"SD\"] = (Projet[\"WORST\"] - Projet[\"BEST\"]) / 6 \nProjet[\"CRIT\"] = CRIT1,True,False,False,False,True,True,True,True,True,True,True,True,False,False,True\nProjet\n</pre> Projet = pd.DataFrame(columns=[\"Activit\u00e9\",'BEST', 'ML', 'WORST', \"AVG\",\"SD\", \"CRIT\"]) Projet[\"Activit\u00e9\"] = ACT1, \"Removing trees\", \"Subsurface drainage\", \"Filling playing field/track\",\"Installing artificial playing turf\",\"Excavation\", \"Pouring concrete footings\", \"Pouring supports seat galleries\", \"Erecting pre-cast galleries\", \"Pouring seats\",\"Steel structure\",\"Roof\", \"Dressing rooms\", \"Painting\",\"Lights\",\"Scoreboard\" Projet[\"BEST\"] = BEST1,1,4,11,11,2,3,10,9,3,1,3,3,3,1,2 Projet[\"ML\"] = ML1,2,8,14,12,4,4,10,10,4,2,4,4,3,2,3 Projet[\"WORST\"] = WORST1,3,12,17,13,6,8,10,11,5,3,5,5,6,3,4 Projet[\"AVG\"] =( Projet[\"BEST\"] + 4* Projet[\"ML\"] + Projet[\"WORST\"] )/ 6  Projet[\"SD\"] = (Projet[\"WORST\"] - Projet[\"BEST\"]) / 6  Projet[\"CRIT\"] = CRIT1,True,False,False,False,True,True,True,True,True,True,True,True,False,False,True Projet Out[109]: Activit\u00e9 BEST ML WORST AVG SD CRIT 0 Clearing the site 3 6 6 5.5 0.500000 True 1 Removing trees 1 2 3 2.0 0.333333 True 2 Subsurface drainage 4 8 12 8.0 1.333333 False 3 Filling playing field/track 11 14 17 14.0 1.000000 False 4 Installing artificial playing turf 11 12 13 12.0 0.333333 False 5 Excavation 2 4 6 4.0 0.666667 True 6 Pouring concrete footings 3 4 8 4.5 0.833333 True 7 Pouring supports seat galleries 10 10 10 10.0 0.000000 True 8 Erecting pre-cast galleries 9 10 11 10.0 0.333333 True 9 Pouring seats 3 4 5 4.0 0.333333 True 10 Steel structure 1 2 3 2.0 0.333333 True 11 Roof 3 4 5 4.0 0.333333 True 12 Dressing rooms 3 4 5 4.0 0.333333 True 13 Painting 3 3 6 3.5 0.500000 False 14 Lights 1 2 3 2.0 0.333333 False 15 Scoreboard 2 3 4 3.0 0.333333 True In\u00a0[110]: Copied! <pre>plt.plot(Projet.index,Projet[\"AVG\"].cumsum(), color='red', marker='o', )\nplt.grid(True)\n</pre> plt.plot(Projet.index,Projet[\"AVG\"].cumsum(), color='red', marker='o', ) plt.grid(True) In\u00a0[111]: Copied! <pre>#@title `Param\u00e9trez les variables de d\u00e9part`\n#@markdown Nom de la premi\u00e8re activit\u00e9\nACT1P2 = 'Clearing the site' #@param {type:\"string\"}\n#@markdown Meilleur temps de la premi\u00e8re activit\u00e9\nBEST1P2 = 3 #@param {type:\"number\"}\n#@markdown Temps millieux de la premi\u00e8re activit\u00e9\nML1P2 = 6 #@param {type:\"number\"}\n#@markdown Pire temps de la premi\u00e8re activit\u00e9\nWORST1P2 = 6 #@param {type:\"number\"}\n#@markdown Activit\u00e9 critique?\nCRIT1P2 = True #@param {type:\"boolean\"}\n</pre> #@title `Param\u00e9trez les variables de d\u00e9part` #@markdown Nom de la premi\u00e8re activit\u00e9 ACT1P2 = 'Clearing the site' #@param {type:\"string\"} #@markdown Meilleur temps de la premi\u00e8re activit\u00e9 BEST1P2 = 3 #@param {type:\"number\"} #@markdown Temps millieux de la premi\u00e8re activit\u00e9 ML1P2 = 6 #@param {type:\"number\"} #@markdown Pire temps de la premi\u00e8re activit\u00e9 WORST1P2 = 6 #@param {type:\"number\"} #@markdown Activit\u00e9 critique? CRIT1P2 = True #@param {type:\"boolean\"} In\u00a0[112]: Copied! <pre>Projet2 = pd.DataFrame(columns=[\"Activit\u00e9\",'BEST', 'ML', 'WORST', \"AVG\",\"SD\", \"CRIT\"])\nProjet2[\"Activit\u00e9\"] = ACT1P2, \"Removing trees\", \"Subsurface drainage\", \"Filling playing field/track\",\"Installing artificial playing turf\",\"Excavation\", \"Pouring concrete footings\", \"Pouring supports seat galleries\", \"Erecting pre-cast galleries\", \"Pouring seats\",\"Steel structure\",\"Roof\", \"Dressing rooms\", \"Painting\",\"Lights\",\"Scoreboard\"\nProjet2[\"BEST\"] = BEST1P2,1,4,11,11,2,3,10,11,1,3,6,3,3,3,2\nProjet2[\"ML\"] = ML1P2,2,8,14,12,4,4,12,13,4,4,8,4,5,4,3\nProjet2[\"WORST\"] = WORST1P2,3,12,17,13,6,8,14,15,7,8,10,5,7,8,4\nProjet2[\"AVG\"] =( Projet[\"BEST\"] + 4* Projet[\"ML\"] + Projet[\"WORST\"] )/ 6 \nProjet2[\"SD\"] = (Projet[\"WORST\"] - Projet[\"BEST\"]) / 6 \nProjet2[\"CRIT\"] = CRIT1P2,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True\nProjet2\n</pre> Projet2 = pd.DataFrame(columns=[\"Activit\u00e9\",'BEST', 'ML', 'WORST', \"AVG\",\"SD\", \"CRIT\"]) Projet2[\"Activit\u00e9\"] = ACT1P2, \"Removing trees\", \"Subsurface drainage\", \"Filling playing field/track\",\"Installing artificial playing turf\",\"Excavation\", \"Pouring concrete footings\", \"Pouring supports seat galleries\", \"Erecting pre-cast galleries\", \"Pouring seats\",\"Steel structure\",\"Roof\", \"Dressing rooms\", \"Painting\",\"Lights\",\"Scoreboard\" Projet2[\"BEST\"] = BEST1P2,1,4,11,11,2,3,10,11,1,3,6,3,3,3,2 Projet2[\"ML\"] = ML1P2,2,8,14,12,4,4,12,13,4,4,8,4,5,4,3 Projet2[\"WORST\"] = WORST1P2,3,12,17,13,6,8,14,15,7,8,10,5,7,8,4 Projet2[\"AVG\"] =( Projet[\"BEST\"] + 4* Projet[\"ML\"] + Projet[\"WORST\"] )/ 6  Projet2[\"SD\"] = (Projet[\"WORST\"] - Projet[\"BEST\"]) / 6  Projet2[\"CRIT\"] = CRIT1P2,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True Projet2 Out[112]: Activit\u00e9 BEST ML WORST AVG SD CRIT 0 Clearing the site 3 6 6 5.5 0.500000 True 1 Removing trees 1 2 3 2.0 0.333333 True 2 Subsurface drainage 4 8 12 8.0 1.333333 False 3 Filling playing field/track 11 14 17 14.0 1.000000 False 4 Installing artificial playing turf 11 12 13 12.0 0.333333 False 5 Excavation 2 4 6 4.0 0.666667 True 6 Pouring concrete footings 3 4 8 4.5 0.833333 True 7 Pouring supports seat galleries 10 12 14 10.0 0.000000 True 8 Erecting pre-cast galleries 11 13 15 10.0 0.333333 True 9 Pouring seats 1 4 7 4.0 0.333333 True 10 Steel structure 3 4 8 2.0 0.333333 False 11 Roof 6 8 10 4.0 0.333333 False 12 Dressing rooms 3 4 5 4.0 0.333333 False 13 Painting 3 5 7 3.5 0.500000 False 14 Lights 3 4 8 2.0 0.333333 False 15 Scoreboard 2 3 4 3.0 0.333333 True In\u00a0[113]: Copied! <pre>plt.plot(Projet2.index, Projet2[\"AVG\"].cumsum(), color='red', marker='o',)\nplt.grid(True)\n</pre> plt.plot(Projet2.index, Projet2[\"AVG\"].cumsum(), color='red', marker='o',) plt.grid(True) In\u00a0[123]: Copied! <pre>#@title\nBEST = 0\nWORST = 0\nAVG = 0\nSD = 0\n\nBEST2 = 0\nWORST2 = 0\nAVG2 = 0\nSD2 = 0\n\nfor i in range(len(Projet)) : \n  if Projet[\"CRIT\"][i] == True : \n    BEST = BEST + Projet[\"BEST\"][i]\n    WORST = WORST + Projet[\"WORST\"][i]\n    AVG = AVG + Projet[\"AVG\"][i]\n    SD = SD + Projet[\"SD\"][i]**2\n\nfor i in range(len(Projet2)) : \n  if Projet2[\"CRIT\"][i] == True : \n    BEST2 = BEST2 + Projet2[\"BEST\"][i]\n    WORST2 = WORST2 + Projet2[\"WORST\"][i]\n    AVG2 = AVG2 + Projet2[\"AVG\"][i]\n    SD2 = SD2 + Projet2[\"SD\"][i]**2\n\n# create a dictionary\n# with student names as key\n# values as subject details\ndata = {'BEST': [{'P1': BEST, 'P2': BEST2}],\n        'AVG':[{'P1': AVG, 'P2': AVG2},],\n        \"WORST\" :[{\"P1\":WORST,\"P2\":WORST2}],\n        \"SD\" : [{\"P1\":SD, \"P2\":SD2}],\n        \"SD/2\" : [{\"P1\":SD*0.5, \"P2\":SD2*0.5}]}\n  \n# get the list of data\n# using items() method\nfor key, values in data.items():\n    for i in values:\n        print(key, \" : \", i)\n</pre> #@title BEST = 0 WORST = 0 AVG = 0 SD = 0  BEST2 = 0 WORST2 = 0 AVG2 = 0 SD2 = 0  for i in range(len(Projet)) :    if Projet[\"CRIT\"][i] == True :      BEST = BEST + Projet[\"BEST\"][i]     WORST = WORST + Projet[\"WORST\"][i]     AVG = AVG + Projet[\"AVG\"][i]     SD = SD + Projet[\"SD\"][i]**2  for i in range(len(Projet2)) :    if Projet2[\"CRIT\"][i] == True :      BEST2 = BEST2 + Projet2[\"BEST\"][i]     WORST2 = WORST2 + Projet2[\"WORST\"][i]     AVG2 = AVG2 + Projet2[\"AVG\"][i]     SD2 = SD2 + Projet2[\"SD\"][i]**2  # create a dictionary # with student names as key # values as subject details data = {'BEST': [{'P1': BEST, 'P2': BEST2}],         'AVG':[{'P1': AVG, 'P2': AVG2},],         \"WORST\" :[{\"P1\":WORST,\"P2\":WORST2}],         \"SD\" : [{\"P1\":SD, \"P2\":SD2}],         \"SD/2\" : [{\"P1\":SD*0.5, \"P2\":SD2*0.5}]}    # get the list of data # using items() method for key, values in data.items():     for i in values:         print(key, \" : \", i) <pre>BEST  :  {'P1': 40, 'P2': 33}\nAVG  :  {'P1': 53.0, 'P2': 43.0}\nWORST  :  {'P1': 66, 'P2': 63}\nSD  :  {'P1': 2.166666666666667, 'P2': 1.8333333333333335}\nSD/2  :  {'P1': 1.0833333333333335, 'P2': 0.9166666666666667}\n</pre> In\u00a0[115]: Copied! <pre>#@title\nx_axis = np.arange(BEST,WORST)\nmean = statistics.mean(x_axis)\nsd = statistics.stdev(x_axis)\nx_axis2 = np.arange(BEST2,WORST2)\nmean2 = statistics.mean(x_axis2)\nsd2 = statistics.stdev(x_axis2)\nplt.plot(x_axis, norm.pdf(x_axis,mean, sd), color='g', label='Projet 1')\nplt.plot(x_axis2, norm.pdf(x_axis2,mean2, sd2), color='r', label='Projet 2')\nplt.grid(True)\nplt.legend()\nplt.show()\n</pre> #@title x_axis = np.arange(BEST,WORST) mean = statistics.mean(x_axis) sd = statistics.stdev(x_axis) x_axis2 = np.arange(BEST2,WORST2) mean2 = statistics.mean(x_axis2) sd2 = statistics.stdev(x_axis2) plt.plot(x_axis, norm.pdf(x_axis,mean, sd), color='g', label='Projet 1') plt.plot(x_axis2, norm.pdf(x_axis2,mean2, sd2), color='r', label='Projet 2') plt.grid(True) plt.legend() plt.show() <p>PROBABILITY (P1 \u2265 P2) = PROBABILITY (P1 \u2212 P2 \u2265 0)</p> <p>AVG(X \u2212 Y) = AVG(X) \u2212 AVG(Y) VAR(X \u2212 Y) = VAR(X) + VAR(Y) STDEV(X \u2212 Y) \u2260 STDEV(X) + STDEV(Y)</p> <p>PROBABILITY (DIFFERENCE \u2265 0) = 1 \u2212 PROBABILITY (DIFFERENCE &lt; 0) = 1 \u2212 NORMDIST(0,DIFFAVG , SDVAR, 1) = %</p> In\u00a0[129]: Copied! <pre>from statistics import NormalDist\nDIFFAVG = AVG2-AVG\nSDDIST = SD+SD2\nSDVAR = (SD+SD2)**0.5\nprint((1-norm(loc=DIFFAVG,scale=SDVAR).cdf(0))*100,\"%\")\n</pre> from statistics import NormalDist DIFFAVG = AVG2-AVG SDDIST = SD+SD2 SDVAR = (SD+SD2)**0.5 print((1-norm(loc=DIFFAVG,scale=SDVAR).cdf(0))*100,\"%\") <pre>2.866515719235352e-05 %\n</pre> In\u00a0[130]: Copied! <pre>#@markdown Nombre de simulation\nnbsim = 4500 #@param {type:\"slider\", min:500, max:50000, step:500} \nsim = nbsim\ntab_time = np.array([])\nfor j in range(sim) :\n  time = 0\n  for i in range(len(Projet)) : \n    BEST = Projet2[\"BEST\"][i]\n    WORST = Projet2[\"WORST\"][i]\n    ML = Projet2[\"ML\"][i]\n    time = time + (round(random.triangular(BEST,WORST,ML),0))\n  tab_time = np.append(tab_time,time)\n  time = pd.DataFrame(data={'Total time': tab_time})\np = sns.displot(time, x=\"Total time\",  kde=True,binwidth=1)\n</pre> #@markdown Nombre de simulation nbsim = 4500 #@param {type:\"slider\", min:500, max:50000, step:500}  sim = nbsim tab_time = np.array([]) for j in range(sim) :   time = 0   for i in range(len(Projet)) :      BEST = Projet2[\"BEST\"][i]     WORST = Projet2[\"WORST\"][i]     ML = Projet2[\"ML\"][i]     time = time + (round(random.triangular(BEST,WORST,ML),0))   tab_time = np.append(tab_time,time)   time = pd.DataFrame(data={'Total time': tab_time}) p = sns.displot(time, x=\"Total time\",  kde=True,binwidth=1) In\u00a0[121]: Copied! <pre>#@title\ntime.describe().transpose()\n</pre> #@title time.describe().transpose() Out[121]: count mean std min 25% 50% 75% max Total time 16000.0 109.049312 3.868729 96.0 106.0 109.0 112.0 124.0 In\u00a0[119]: Copied! <pre>#@markdown % du projet qui est plus petit que la cible\nCIBLE = 115 #@param {type:\"number\"}\nprint(sum(time[\"Total time\"]&lt;CIBLE)/sim*100,\"%\")\n</pre> #@markdown % du projet qui est plus petit que la cible CIBLE = 115 #@param {type:\"number\"} print(sum(time[\"Total time\"] <pre>91.9 %\n</pre> In\u00a0[136]: Copied! <pre>Projet2 = pd.DataFrame(columns=[\"Activit\u00e9\", 'ML',\"PERSO\",\"PLAN\", \"CRIT\"])\nProjet2[\"Activit\u00e9\"] = ACT1P2, \"Removing trees\", \"Subsurface drainage\", \"Filling playing field/track\",\"Installing artificial playing turf\",\"Excavation\", \"Pouring concrete footings\", \"Pouring supports seat galleries\", \"Erecting pre-cast galleries\", \"Pouring seats\",\"Steel structure\",\"Roof\", \"Dressing rooms\", \"Painting\",\"Lights\",\"Scoreboard\"\nProjet2[\"ML\"] = ML1P2,2,8,14,12,4,4,12,13,4,4,8,4,5,4,3\nProjet2[\"PERSO\"] = 2,2,2,3,3,3,3,4,4,2,4,2,2,2,2,1\nProjet2[\"PLAN\"] = Projet2[\"ML\"] * Projet2[\"PERSO\"]\nProjet2[\"CRIT\"] = CRIT1P2,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True\nProjet2\n</pre> Projet2 = pd.DataFrame(columns=[\"Activit\u00e9\", 'ML',\"PERSO\",\"PLAN\", \"CRIT\"]) Projet2[\"Activit\u00e9\"] = ACT1P2, \"Removing trees\", \"Subsurface drainage\", \"Filling playing field/track\",\"Installing artificial playing turf\",\"Excavation\", \"Pouring concrete footings\", \"Pouring supports seat galleries\", \"Erecting pre-cast galleries\", \"Pouring seats\",\"Steel structure\",\"Roof\", \"Dressing rooms\", \"Painting\",\"Lights\",\"Scoreboard\" Projet2[\"ML\"] = ML1P2,2,8,14,12,4,4,12,13,4,4,8,4,5,4,3 Projet2[\"PERSO\"] = 2,2,2,3,3,3,3,4,4,2,4,2,2,2,2,1 Projet2[\"PLAN\"] = Projet2[\"ML\"] * Projet2[\"PERSO\"] Projet2[\"CRIT\"] = CRIT1P2,True,False,False,False,True,True,True,True,True,False,False,False,False,False,True Projet2 Out[136]: Activit\u00e9 ML PERSO PLAN CRIT 0 Clearing the site 6 2 12 True 1 Removing trees 2 2 4 True 2 Subsurface drainage 8 2 16 False 3 Filling playing field/track 14 3 42 False 4 Installing artificial playing turf 12 3 36 False 5 Excavation 4 3 12 True 6 Pouring concrete footings 4 3 12 True 7 Pouring supports seat galleries 12 4 48 True 8 Erecting pre-cast galleries 13 4 52 True 9 Pouring seats 4 2 8 True 10 Steel structure 4 4 16 False 11 Roof 8 2 16 False 12 Dressing rooms 4 2 8 False 13 Painting 5 2 10 False 14 Lights 4 2 8 False 15 Scoreboard 3 1 3 True <p>https://www.pmi.org/learning/library/evm-cpm-evaluate-project-performance-6355</p> In\u00a0[178]: Copied! <pre>dummy = 0\nProjet2 = pd.DataFrame(columns=[\"Activit\u00e9\", 'BAC',\"PV\",\"AC\", \"EV\"])\nProjet2[\"Activit\u00e9\"] = \"Preparation\", \"Field work\", \"Ground work\",\"Seating\",\"Construction\"\nProjet2[\"BAC\"] = 24000,141000,36000,162000,91500\nProjet2[\"PV\"] = 24000,6000,9000,0,0\nProjet2[\"AC\"] = 27000,9000,9000,0,0\nProjet2[\"EV\"] = Projet2[\"PV\"] * Projet2[\"AC\"]\nProjet2\n</pre> dummy = 0 Projet2 = pd.DataFrame(columns=[\"Activit\u00e9\", 'BAC',\"PV\",\"AC\", \"EV\"]) Projet2[\"Activit\u00e9\"] = \"Preparation\", \"Field work\", \"Ground work\",\"Seating\",\"Construction\" Projet2[\"BAC\"] = 24000,141000,36000,162000,91500 Projet2[\"PV\"] = 24000,6000,9000,0,0 Projet2[\"AC\"] = 27000,9000,9000,0,0 Projet2[\"EV\"] = Projet2[\"PV\"] * Projet2[\"AC\"] Projet2 Out[178]: Activit\u00e9 BAC PV AC EV 0 Preparation 24000 24000 27000 648000000 1 Field work 141000 6000 9000 54000000 2 Ground work 36000 9000 9000 81000000 3 Seating 162000 0 0 0 4 Construction 91500 0 0 0 In\u00a0[189]: Copied! <pre># create a dictionary\n# with student names as key\n# values as subject details\ndata = {'Total': [{'BAC': sum(Projet2[\"BAC\"][:5])}, {'PV': sum(Projet2[\"PV\"][:5])},{\"AC\":sum(Projet2[\"AC\"][:5])},{\"EV\":sum(Projet2[\"EV\"][:5])}]}\n  \n# get the list of data\n# using items() method\nfor key, values in data.items():\n    for i in values:\n        print(key, \" : \", i)\n</pre> # create a dictionary # with student names as key # values as subject details data = {'Total': [{'BAC': sum(Projet2[\"BAC\"][:5])}, {'PV': sum(Projet2[\"PV\"][:5])},{\"AC\":sum(Projet2[\"AC\"][:5])},{\"EV\":sum(Projet2[\"EV\"][:5])}]}    # get the list of data # using items() method for key, values in data.items():     for i in values:         print(key, \" : \", i) <pre>Total  :  {'BAC': 454500.0}\nTotal  :  {'PV': 39000.0}\nTotal  :  {'AC': 45000.0}\nTotal  :  {'EV': 783000000.0}\n</pre> In\u00a0[193]: Copied! <pre>#@markdown Planned Accomplishment Rate\nPAR = 40050 #@param {type:\"number\"}\n\n# create a dictionary\n# with student names as key\n# values as subject details\ndata = {'Total': [{'ES': PAR/(sum(Projet2[\"PV\"][:5]))},{\"CV\":PAR-sum(Projet2[\"AC\"][:5])}]}\n  \n# get the list of data\n# using items() method\nfor key, values in data.items():\n    for i in values:\n        print(key, \" : \", i)\n</pre> #@markdown Planned Accomplishment Rate PAR = 40050 #@param {type:\"number\"}  # create a dictionary # with student names as key # values as subject details data = {'Total': [{'ES': PAR/(sum(Projet2[\"PV\"][:5]))},{\"CV\":PAR-sum(Projet2[\"AC\"][:5])}]}    # get the list of data # using items() method for key, values in data.items():     for i in values:         print(key, \" : \", i) <pre>Total  :  {'ES': 1.0269230769230768}\nTotal  :  {'CV': -4950.0}\n</pre>"},{"location":"applications/","title":"Applications","text":""},{"location":"applications/#liste-dapplication-que-jutilise","title":"Liste d'application que j'utilise","text":""},{"location":"applications/#obsidian","title":"Obsidian","text":"<p>J'utilise Obsidian commme outil de gestion de la connaissance personnel, mais je pr\u00e9f\u00e8re appeler \u00e7a mon second cerveau. C'est un outil tr\u00e8s puissant qui me permet de capturer l'information, de faire des liens entre ce que j'ai appris et ce que je dois faire. Il m'aide aussi \u00e0 g\u00e9rer mes projets. </p>"},{"location":"applications/#suite-office","title":"Suite office","text":"<p>Je maitrise parfaitement les outils de la suite office de Microsoft. J'utilise Teams pour toutes mes r\u00e9unions \u00e0 distance ainsi que pour contacter mes coll\u00e8gues de travail. J'ai appris la programmation VBA ce qui me permette de d\u00e9finir des foncitons personnaliser ainsi que certain application plus pousser. </p>"},{"location":"applications/#zotero","title":"Zotero","text":"<p>J'utilise Zotero pour stocker ma biblioth\u00e8que de livre technique. Il y a une int\u00e9gration avec Obsidian et Word pour documenter mes sources. </p>"},{"location":"applications/#miro","title":"Miro","text":""},{"location":"blog/","title":"Blog","text":""},{"location":"blog/posts/test/","title":"Test 1","text":""}]}